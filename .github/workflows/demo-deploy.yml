name: Deploy Demo Firebase

on:
  push:
    branches:
      - main

env:
  FIREBASE_PROJECT_ID: ${{ vars.DEMO_FIREBASE_PROJECT_ID }}
  INGEST_TOPIC: ${{ vars.DEMO_INGEST_TOPIC || 'ingest.raw' }}
  FRONTEND_URL: ${{ vars.FRONTEND_URL || vars.DEMO_FRONTEND_URL }}
  FUNCTIONS_HEALTH_URL: ${{ vars.DEMO_FUNCTIONS_HEALTH_URL }}
  VITE_API_BASE: ${{ secrets.VITE_API_BASE }}
  VITE_GOOGLE_MAPS_API_KEY: ${{ secrets.VITE_GOOGLE_MAPS_API_KEY }}
  VITE_GOOGLE_MAP_ID: ${{ secrets.VITE_GOOGLE_MAP_ID }}

jobs:
  deploy:
    name: Deploy to Demo
    runs-on: ubuntu-latest
    environment: demo
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.x

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.18.1
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.DEMO_SERVICE_ACCOUNT_JSON }}

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Validate configuration
        run: |
          test -n "$FIREBASE_PROJECT_ID" || { echo "Set repository variable DEMO_FIREBASE_PROJECT_ID"; exit 1; }
          gcloud config set project "$FIREBASE_PROJECT_ID"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools@13

      - name: Confirm Firebase target project
        run: firebase projects:list | grep "$FIREBASE_PROJECT_ID"

      - name: Sync Cloud Function secrets
        env:
          INGEST_HMAC_SECRET: ${{ secrets.DEMO_INGEST_HMAC_SECRET }}
        run: |
          if [ -z "$INGEST_HMAC_SECRET" ]; then
            echo "::error::Set the DEMO_INGEST_HMAC_SECRET GitHub secret before deploying; ingest smoke tests require it."
            exit 1
          fi
          printf '%s' "$INGEST_HMAC_SECRET" | firebase functions:secrets:set INGEST_HMAC_SECRET --project "$FIREBASE_PROJECT_ID" --data-file -
          firebase functions:config:set ingest.hmac_secret="$INGEST_HMAC_SECRET" --project "$FIREBASE_PROJECT_ID"
          firebase functions:config:set ingest.topic="$INGEST_TOPIC" --project "$FIREBASE_PROJECT_ID"

      - name: Ensure ingest Pub/Sub topic exists
        run: |
          gcloud pubsub topics describe "$INGEST_TOPIC" >/dev/null 2>&1 || \
          gcloud pubsub topics create "$INGEST_TOPIC"

      - name: Lint
        run: pnpm lint

      - name: Build frontend
        run: pnpm --filter crowdpm-frontend build

      - name: Build functions
        run: pnpm --filter crowdpm-functions build

      - name: Determine diff base
        id: diffbase
        env:
          BEFORE_SHA: ${{ github.event.before }}
        run: |
          before_ref="$BEFORE_SHA"
          if [ -z "$before_ref" ] || [ "$before_ref" = "0000000000000000000000000000000000000000" ]; then
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              before_ref="$(git rev-parse HEAD^)"
            else
              before_ref="$(git rev-list --max-parents=0 HEAD)"
            fi
          fi
          echo "sha=$before_ref" >> "$GITHUB_OUTPUT"

      - name: Detect Firestore rules changes
        id: firestore
        run: |
          if git diff --name-only "${{ steps.diffbase.outputs.sha }}" HEAD | grep -q '^firestore.rules$'; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Detect Firestore index changes
        id: firestore_indexes
        run: |
          if git diff --name-only "${{ steps.diffbase.outputs.sha }}" HEAD | grep -q '^firestore.indexes.json$'; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Deploy Firestore indexes
        if: ${{ steps.firestore_indexes.outputs.changed == 'true' }}
        run: firebase deploy --only firestore:indexes --project "$FIREBASE_PROJECT_ID"

      - name: Wait for Firestore indexes
        if: ${{ steps.firestore_indexes.outputs.changed == 'true' }}
        run: |
          echo "Waiting for Firestore indexes to finish building..."
          end=$((SECONDS + 900))
          while [ $SECONDS -lt $end ]; do
            states="$(gcloud firestore indexes composite list --project "$FIREBASE_PROJECT_ID" --format='value(state)' | sort -u)"
            if [ -z "$states" ]; then
              echo "No composite indexes found; skipping wait."
              break
            fi
            if ! echo "$states" | grep -q 'CREATING'; then
              echo "All indexes are ready."
              break
            fi
            echo "Indexes still building (states: $states); checking again in 30s..."
            sleep 30
          done
          if [ $SECONDS -ge $end ]; then
            echo "::warning::Timed out waiting for Firestore indexes to finish building. Check the Firebase console for progress."
          fi

      - name: Deploy hosting and functions
        run: firebase deploy --only hosting,functions --project "$FIREBASE_PROJECT_ID"

      - name: Deploy Firestore rules
        if: ${{ steps.firestore.outputs.changed == 'true' }}
        run: firebase deploy --only firestore:rules --project "$FIREBASE_PROJECT_ID"

      - name: Frontend smoke test
        if: ${{ env.FRONTEND_URL }}
        run: |
          curl --fail --silent --show-error "$FRONTEND_URL" >/dev/null

      - name: API health check
        if: ${{ env.FUNCTIONS_HEALTH_URL }}
        run: |
          curl --fail --silent --show-error "$FUNCTIONS_HEALTH_URL"
